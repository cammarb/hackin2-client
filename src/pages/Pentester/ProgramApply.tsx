import { Button } from '@/components/ui/button';
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useApplyToProgramMutation } from '@/features/pentester/pentesterSlice';
import { zodResolver } from '@hookform/resolvers/zod';
import { useFieldArray, useForm } from 'react-hook-form';
import { useParams } from 'react-router-dom';
import { ZodType, z } from 'zod';

type Application = {
  findings: string;
  evidence: { item: string }[];
};

export const ProgramApply = () => {
  const [apply] = useApplyToProgramMutation();

  const schema: ZodType<Application> = z.object({
    findings: z.string().min(50),
    evidence: z.array(z.object({ item: z.string().min(2).max(200) }))
  });

  const form = useForm<Application>({
    resolver: zodResolver(schema),
    defaultValues: {
      findings: '',
      evidence: [{ item: '' }]
    }
  });

  const { fields, append, remove } = useFieldArray<Application>({
    name: 'evidence',
    control: form.control,
    rules: {
      required: 'Please append at least 1 item'
    }
  });

  const submitData = async (data: Application) => {
    console.log('pressed');
    try {
      const addedProgram = await apply({
        findings: data.findings,
        evidence: data.evidence
          .map((e) => e.item)
          .filter((e) => e.trim() !== '')
      }).unwrap();
      form.reset({});
      console.log('Applied to program:', addedProgram);
    } catch (error) {
      console.error('Error applying to program:', error);
    }
  };

  return (
    <main className="mx-auto sm:w-[100%] md:w-[80%] lg:w-[60%]">
      <div className="grid w-full gap-2">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(submitData)} className="space-y-8">
            <FormField
              control={form.control}
              name="findings"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Findings Summary</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Summary of findings..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {fields.map((field, index) => (
              <FormField
                key={field.id}
                control={form.control}
                name={`evidence.${index}.item`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Evidence</FormLabel>

                    <FormControl>
                      <div className="flex items-center space-x-2">
                        <Input
                          placeholder={`Evidence ${index + 1}`}
                          {...field}
                        />
                        <Button
                          variant="destructive"
                          type="button"
                          onClick={() => remove(index)}
                        >
                          Delete
                        </Button>
                      </div>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            ))}
            <Button
              type="button"
              onClick={() => {
                append({ item: '' });
              }}
            >
              Add Evidence
            </Button>
            <Button type="submit">Submit</Button>
          </form>
        </Form>
      </div>
    </main>
  );
};
