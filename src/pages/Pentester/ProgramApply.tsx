import { Button } from '@/components/ui/button';
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectItem
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  useGetProgramSeverityRewardsQuery,
  useSubmitProgramReportMutation
} from '@/features/pentester/pentesterSlice';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { useParams } from 'react-router-dom';
import { ZodType, z } from 'zod';
import MarkdownEditor from '@uiw/react-markdown-editor';

type Application = {
  asset: string;
  severity: string;
  findings: File[];
  evidence: string;
  impact: string;
};

export const ProgramApply = () => {
  const { id } = useParams();
  const {
    data: response,
    isLoading,
    isError,
    isSuccess
  } = useGetProgramSeverityRewardsQuery(id);
  const [submit] = useSubmitProgramReportMutation();

  const evidenceMd = `## Summary


## Places affected


## Steps to reproduce
1. ...
2. ...
3. ...


## Supporting material`;

  const schema = z.object({
    asset: z.string().optional(),
    severity: z.string().optional(),
    findings: z.array(z.instanceof(File)).optional(),
    evidence: z.string().optional(),
    impact: z.string().optional()
  });

  const form = useForm<Application>({
    resolver: zodResolver(schema),
    defaultValues: {
      asset: '',
      severity: '',
      findings: [],
      evidence: evidenceMd,
      impact: ''
    }
  });

  const submitData = async (data: Application) => {
    try {
      const formData = new FormData();
      console.log(data.findings);

      data.findings.forEach((finding, index) => {
        formData.append(`findings[${index}]`, finding);
      });

      // Append other fields to formData
      formData.append('asset', data.asset);
      formData.append('severity', data.severity);
      formData.append('evidence', data.evidence);
      formData.append('impact', data.impact);

      const addedSubmission = await submit({
        id,
        submission: formData
      }).unwrap();
      console.log('Report submitted:', addedSubmission);
      form.reset({});
    } catch (error) {
      console.error('Error submitting report:', error);
    }
  };

  return (
    <main className="mx-auto sm:w-[100%] md:w-[80%] lg:w-[60%]">
      <div className="grid w-full gap-2">
        <h1>Submit Report</h1>
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(submitData)}
            className="space-y-8"
            encType="multipart/form-data"
          >
            <FormField
              control={form.control}
              name="asset"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Asset</FormLabel>
                  <FormControl>
                    <Input type="text" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="severity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Severity (optional)</FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger id="severity" aria-label="Select severity">
                        <SelectValue
                          placeholder={'Select severity'}
                          {...field}
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {isSuccess ? (
                          response.severityRewards.map(
                            (severityReward: {
                              id: string;
                              severity: string;
                            }) => (
                              <SelectItem
                                key={severityReward.id}
                                value={severityReward.id}
                              >
                                {severityReward.severity}
                              </SelectItem>
                            )
                          )
                        ) : (
                          <SelectItem value="LOW">LOW</SelectItem>
                        )}
                      </SelectContent>
                    </Select>
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="evidence"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Evidence</FormLabel>
                  <FormControl>
                    <MarkdownEditor
                      className="prose dark:prose-invert h-fit min-w-full"
                      showToolbar={true}
                      enablePreview={true}
                      enableScroll={true}
                      {...field}
                    />
                  </FormControl>

                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="impact"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Impact</FormLabel>
                  <FormControl>
                    <Textarea {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="findings"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Findings</FormLabel>
                  <FormControl>
                    <Input
                      name="findings"
                      className="w-fit"
                      type="file"
                      multiple
                      onChange={(e) =>
                        field.onChange(
                          e.target.files ? Array.from(e.target.files) : []
                        )
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit">Submit</Button>
          </form>
        </Form>
      </div>
    </main>
  );
};
